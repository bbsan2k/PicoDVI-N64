;
; Copyright (c) 2022-2023 Konrad Beckmann
;
; SPDX-License-Identifier: BSD-3-Clause
;

.program n64

; 0-6 = data
; 7   = dsync
; 8   = clk

; Data is stable on Negedge of CLK

n64_video_start:

.wrap_target

    ; Wait for high CLK
    wait 1 pin 8

    ; Sample 4 bytes in total
    set x, 2

    ; Wait for low CLK
    wait 0 pin 8

    ; if DSYNC: goto n64_video_start
    jmp pin n64_video_start

    ; DSYNC == 0

    ; Sample first byte if data + dsyncn
    in pins, 8

n64_video_capture_loop:

    ; Wait for high CLK
    wait 1 pin 8
    ; Wait for low CLK
    wait 0 pin 8

    ; Sample data + dsyncn
    in pins, 8

    jmp x-- n64_video_capture_loop

    ; Auto-push is enabled, saves one instruction/cycle
    ; push

    ; Implicit jump (wrap)
    ; jmp wait_for_dsyncn
.wrap


% c-sdk {
void n64_program_init(PIO pio, uint sm, uint offset) {

    // gpio0 -> 8 input
    for (int i = 0; i <= 8; i++) {
        pio_gpio_init(pio, i);
    }

    pio_sm_config c = n64_program_get_default_config(offset);

    // Double the FIFO depth
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);

    // Enable auto-push
    sm_config_set_in_shift(&c, true, true, 32);

    // GPIO0 -> GPIO8 as in pins
    sm_config_set_in_pins(&c, 0);

    // JMP pin = DSYNCn
    sm_config_set_jmp_pin(&c, 7);

    pio_sm_init(pio, sm, offset, &c);
}
%}
